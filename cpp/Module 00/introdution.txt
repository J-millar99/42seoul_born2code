코드를 -Wall -Wextra -Werror 플래그와 함께 C++로 컴파일하십시오.
코드는 -std=c++98 플래그를 추가해도 여전히 컴파일되어야 합니다.

형식 및 명명 규칙
• 연습 디렉터리는 ex00, ex01, ..., exn과 같이 명명됩니다.
• 파일, 클래스, 함수, 멤버 함수 및 속성은 지침에 따라 명명하십시오.
• 클래스 이름은 UpperCamelCase 형식으로 작성하십시오. 클래스 코드를 포함하는 파일은 항상 클래스 이름에 따라 명명됩니다.
• 특별히 지정되지 않은 경우 모든 출력 메시지는 새 줄 문자로 끝나야 하며 표준 출력에 표시되어야 합니다.

C++로 전환되었습니다. 따라서 다음과 같은 규칙이 적용됩니다:
• 표준 라이브러리의 거의 모든 것을 사용할 수 있습니다. 따라서 이미 알고 있는 것에 고수하는 대신 가능한 한 C 함수의 C++ 스타일 버전을 사용하는 것이 좋습니다.
• 그러나 다른 외부 라이브러리는 사용할 수 없습니다. 즉, C++11 및 파생 형태, 그리고 Boost 라이브러리는 금지됩니다. 또한 *printf(), *alloc() 및 free() 함수는 금지되어 있습니다. 이를 사용하면 학점이 0이 됩니다.
• 특별히 명시되지 않은 경우 using namespace <ns_name> 및 friend 키워드는 금지됩니다. 그렇지 않으면 학점이 -42가 됩니다.
• STL은 모듈 08과 09에서만 사용할 수 있습니다. 이는 컨테이너 (vector/list/map/등) 및 알고리즘 (<algorithm> 헤더를 포함하는 모든 것)을 해당 모듈까지 사용할 수 없다는 것을 의미합니다. 그렇지 않으면 학점이 -42가 됩니다.

C++에서도 메모리 누수가 발생할 수 있습니다. 메모리를 할당할 때(new 키워드를 사용하는 경우) 메모리 누수를 피해야 합니다.
• 모듈 02에서 모듈 09까지는 클래스가 명시적으로 다르게 지정되지 않는 한 정통 정규형식으로 설계되어야 합니다.
• 함수 템플릿을 제외한 헤더 파일에 함수 구현이 들어가면 해당 연습에 대해 학점이 0입니다.
• 각 헤더를 독립적으로 사용할 수 있어야 합니다. 따라서 필요한 모든 종속성을 포함해야 합니다. 그러나 중복 포함 문제를 피하기 위해 include guards를 추가해야 합니다. 그렇지 않으면 학점이 0이 됩니다.

Read me
• 코드를 분할해야 하는 경우 필요에 따라 몇 가지 추가 파일을 추가할 수 있습니다(즉, 코드를 나누기 위해). 이러한 과제는 프로그램에 의해 확인되지 않으므로 필수 파일만 제출하면 됩니다.
• 때로는 연습지의 지침이 간결해 보일 수 있지만 예제에서 명시적으로 기술되지 않은 요구 사항을 보여줄 수 있습니다.
• 시작하기 전에 각 모듈을 완전히 읽으세요! 정말 그렇게 해야 합니다.